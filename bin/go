#!/usr/bin/env bash

set -euo pipefail
DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd)"
cd "$DIR"

_help() (
  cat <<EOF
Usage: $(basename ${0}) cmd

where cmd is one of:

help     Displays this help text.
sync     Replaces files in this repos with links to \$HOME.
         This will create empty files in \$HOME if no corresponding file exists.
show     Start a loop that shows the diffs between current machine state and
         dotfiles target state.
update   Updates everything, or at least tries to.
EOF
)

_check_binary() (
  trap "echo Missing binary: $1" EXIT
  command -v $1 >/dev/null
  trap - EXIT
)

_sync() (
  # Required tools
  _check_binary nix
  _check_binary brew
  nix --version > tool_versions
  brew --version >> tool_versions

  # brew packages
  for leaf in $(brew leaves); do brew list $leaf --version; done > brew_leaves
  if [ $(uname) = Darwin ]; then
    brew list --version --cask > brew_casks
  fi

  # Configuration files
  cd home
  for file_in_repo in $(find . -type f); do
    file_in_home=$HOME/${file_in_repo/"/dot/"/}
    mkdir -p $(dirname $file_in_home)
    [ -f $file_in_home ] || touch $file_in_home
    rm -f $file_in_repo
    ln $file_in_home $file_in_repo
  done
  cd ..

  # Vim plugins
  dir_in_home=$HOME/.vim/bundle
  mkdir -p $dir_in_home
  dir_in_repo=vim_plugins
  rm -rf $dir_in_repo
  mkdir -p $dir_in_repo
  for plugin in $(ls $dir_in_home); do
    origin=$(git -C $dir_in_home/$plugin remote get-url origin)
    commit_date=$(git -C $dir_in_home/$plugin show -q --format=%cd --date=format:%Y%m%d)
    commit_count=$(git -C $dir_in_home/$plugin rev-list --count HEAD)
    commit_sha=$(git -C $dir_in_home/$plugin show -q --format=%h --abbrev=8)
    jq -n \
       --arg version $commit_date.$commit_count.$commit_sha \
       --arg origin $origin \
       '{$origin,$version}' \
     > $dir_in_repo/$plugin
  done
)

_update() (
  go sync
  git update-index --refresh
  if ! git diff-index --quiet HEAD; then
    echo "update should only be called on a machine that is up-to-date."
    exit 1
  fi
  # Vim plugins
  cd $DIR
  for vp in $(cd vim_plugins; ls); do (
    cd $HOME/.vim/bundle/$vp
    git pull
  ) done
  # brew recipes
  brew update && brew upgrade
  # brew casks
  if [ $(uname) = Darwin ]; then
    for cask in $(cat brew_casks | cut -f1 -d' '); do
      brew reinstall --cask $cask
    done
  fi
  # tools
  nix upgrade-nix
  update-nixpkgs
  go sync
)

_show() (
  while true; do go sync; sleep 3; git --no-pager diff; done
)

_main() (
  case "${1:-}" in
    help|sync|show|update)
      _$1
      ;;
    *)
      _help
      exit 1
      ;;
  esac
)

_main $@
