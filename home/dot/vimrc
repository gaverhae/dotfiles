runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()
syntax on
filetype plugin indent on

set nocompatible
set modelines=0
let mapleader = ","
let maplocalleader = "-"
runtime plugin/matchit.vim
set scrolloff=3
set listchars=tab:>-,trail:Â·,eol:$,nbsp:Â¬
nmap <silent> <leader>s :set nolist!<CR>
set shortmess=atI

" Correct shell
set shell=bash\ -l

" Colorscheme
set t_Co=256
set background=dark
let g:solarized_termcolors=256
let g:solarized_termtrans=0
colorscheme solarized

" Rainbow parens

let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Tabs and spaces
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab


set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set termencoding=utf-8
set backspace=indent,eol,start
"set relativenumber
set number
set history=1000        " keep 50 lines of command line history
set ruler       " show the cursor position all the time
set showcmd     " display incomplete commands
set incsearch       " do incremental searching
if has("autocmd")
  augroup vimrcEx
  au!
  autocmd! FileType text setlocal textwidth=78
  autocmd! BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
  augroup END
else
  set autoindent
endif
set backup
function! InitBackupDir()
    let separator = "."
    let parent = $HOME .'/' . separator . 'vim/'
    let backup = parent . 'backup/'
    let tmp    = parent . 'tmp/'
    if exists("*mkdir")
        if !isdirectory(parent)
            call mkdir(parent)
        endif
        if !isdirectory(backup)
            call mkdir(backup)
        endif
        if !isdirectory(tmp)
            call mkdir(tmp)
        endif
    endif
    let missing_dir = 0
    if isdirectory(tmp)
        execute 'set backupdir=' . escape(backup, " ") . "/,."
    else
        let missing_dir = 1
    endif
    if isdirectory(backup)
        execute 'set directory=' . escape(tmp, " ") . "/,."
    else
        let missing_dir = 1
    endif
    if missing_dir
        echo "Warning: Unable to create backup directories: "
        . backup ." and " . tmp
        echo "Try: mkdir -p " . backup
        echo "and: mkdir -p " . tmp
        set backupdir=.
        set directory=.
    endif
endfunction
call InitBackupDir()
if has("autocmd")
  au! BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif
au BufRead,BufNewFile *.tex set textwidth=78
set hidden
au! BufWinLeave *? silent! mkview
au! BufWinEnter *? silent! loadview
set viewoptions=folds,cursor
nnoremap ' `
nnoremap ` '
nnoremap t <C-]>
set undodir=~/.vim/undodir
set undofile
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=1000 "maximum number lines to save for undo on a buffer reload
let @d="0f]lli[[A]],,d,,cx4l"
autocmd! BufNewFile,BufRead *.json set ft=javascript
autocmd! BufNewFile,BufRead Makefile set noet
let @a='yyp:s/./=/g, '

fun! StripTrailingWhitespace()
 " Only strip if the b:noStripeWhitespace variable isn't set
  if exists('b:noStripWhitespace')
    return
  endif
  %s/\s\+$//e
endfun
autocmd BufWritePre * call StripTrailingWhitespace()
autocmd FileType diff let b:noStripWhitespace=1

" Color column 80
hi ColorColumn ctermbg=52 guibg=darkred
set cc=80

" Miscellaneous
set hlsearch
nnoremap <leader><space> :noh<bar>set nospell<CR>
nnoremap <leader>z :set spell<cr>
nnoremap <tab> %
vnoremap <tab> %
hi CursorLine   cterm=NONE ctermbg=235
hi CursorColumn cterm=NONE ctermbg=235
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline
set cursorline
nnoremap <Leader>c :set cursorcolumn!<CR>

" Easy windows navigation
nnoremap j gj
nnoremap k gk
inoremap jj <ESC>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

set formatoptions-=t

if has("autocmd")
    autocmd! bufwritepost .vimrc source $MYVIMRC
endif
nmap <leader>v :tabedit $MYVIMRC<CR>

" Bubble lines
vmap <C-k> [egv
vmap <C-j> ]egv

" Working with tabs
nmap <Leader>l :tabnext<CR>
nmap <Leader>h :tabprev<CR>

" Diff current file with last saved version
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
 \ | wincmd p | diffthis

" Change default split position
set splitbelow
set splitright
au BufRead * call matchadd('ErrorMsg', 'Â ')

" Configure SuperTab for nice autocomplete

let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

let g:clojure_maxlines = 10000
autocmd FileType clojure setlocal lispwords+=match
autocmd FileType clojure setlocal lispwords+=mdo
autocmd FileType clojure setlocal lispwords+=form-to
autocmd FileType clojure setlocal lispwords+=try

"Navigate to token
augroup clojure
    autocmd! clojure
    autocmd FileType clojure nmap <buffer> <silent> t [<C-D>
augroup end
nmap T <C-W><C-D>
nmap cpo :Eval<CR>
nmap crr :Require<CR>
nmap cr! :Require!<CR>
nmap Ã§ ya)%a<CR><ESC>pc!!
nmap Ã  ya)%a<CR><ESC>O<ESC>i)<ESC>PI(macroexpand '<ESC>c!!
nnoremap <Leader>sh :Slamhound<CR>
nmap <leader>t :w<CR>:Require<CR>:Eval (run-all-tests)<CR>

"markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'clojure', 'haskell']

" disable paredit-like sexp behaviour
let g:sexp_enable_insert_mode_mappings = 0

" build.boot is a clojure file
autocmd BufNewFile,BufRead build.boot set filetype=clojure
autocmd BufNewFile,BufRead *.edn set filetype=clojure
" detect boot scripts based on filetype
fun! s:DetectNode()
    if getline(1) == '#!/usr/bin/env boot'
        set ft=clojure
    endif
endfun

autocmd BufNewFile,BufRead * call s:DetectNode()

" ruby indents 2 spaces
autocmd FileType ruby setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType sh setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType zsh setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType css setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal expandtab shiftwidth=2 tabstop=2
let g:terraform_fmt_on_save = 1

" NERDTree toggle
map <Leader>n :NERDTreeToggle<CR>

" Haskell
let g:hdevtools_stack = 1
"let g:LanguageClient_serverCommands = {
"  \ 'haskell': ['hie-wrapper', '--lsp', '-l', '/Users/gary/.vim/log/hie.log']
"  \ }
let g:LanguageClient_rootMarkers = ['*.cabal', 'stack.yaml']
augroup haskell
    autocmd! haskell
    au FileType haskell setlocal expandtab shiftwidth=2 tabstop=2
    au Filetype haskell hi link ALEError Error
    au Filetype haskell hi Warning term=underline cterm=underline ctermfg=Yellow gui=undercurl guisp=Gold
    au Filetype haskell hi link ALEWarning Warning
    au Filetype haskell hi link ALEInfo SpellCap
    "au FileType haskell inoremap <tab> :call LanguageClient_contextMenu()<CR>
    au FileType haskell noremap K :call LanguageClient#textDocument_hover()<CR>
    au FileType haskell nmap t :call LanguageClient#textDocument_definition()<CR>
    au FileType haskell noremap <Leader>r :call LanguageClient#textDocument_rename()<CR>
    au FileType haskell noremap <Leader>R :call LanguageClient#textDocument_references()<CR>
    "au FileType haskell map <Leader>lf :call LanguageClient#textDocument_formatting()<CR>
    "au FileType haskell map <Leader>la :call LanguageClient#textDocument_codeAction()<CR>
    "au FileType haskell map <Leader>ls :call LanguageClient#textDocument_documentSymbol()<CR>
augroup end

" utilsnip

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="horizontal"
