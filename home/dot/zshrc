# The following lines were added by compinstall

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' completions 1
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' glob 1
zstyle ':completion:*' group-name ''
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' max-errors 2
zstyle ':completion:*' menu select=1
zstyle ':completion:*' original false
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' substitute 1
zstyle ':completion:*' verbose false
zstyle :compinstall filename '/Users/gary/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall
# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000000
SAVEHIST=1000000
setopt INC_APPEND_HISTORY_TIME noautocd beep extendedglob nomatch
unsetopt notify

bindkey -v
bindkey -M vicmd "/" history-incremental-pattern-search-backward
bindkey -M vicmd "?" history-incremental-pattern-search-forward
# End of lines configured by zsh-newuser-install

unsetopt sharehistory
bindkey '^?' backward-delete-char
autoload history-search-end
zle -N history-beginning-search-backward-end \
    history-search-end
zle -N history-beginning-search-forward-end \
    history-search-end
bindkey '^[[A' history-beginning-search-backward-end
bindkey '^[[B' history-beginning-search-forward-end

setopt incappendhistory histignorealldups histfindnodups histignorespace

autoload -U colors
colors

foreach cmd (locate find wget)
    alias $cmd="noglob $cmd"
end

function box_name {
    [ -f ~/.box-name ] && cat ~/.box-name || hostname -s
}

setopt PROMPT_SUBST
PROMPT=$'%{$fg[green]%}[%T]%{$reset_color%}%{$fg_bold[green]%}%n%{$reset_color%}@%{$fg[yellow]%}$(box_name)%{$reset_color%}%{$fg_bold[blue]%}%~%{$reset_color%}
$ '

eval "$($HOME/.env_vars)"
alias ls="ls --color=auto"
alias grep="grep --color=auto"

# ensure compatibility tmux <-> direnv
if [ -n "$TMUX" ] && [ -n "$DIRENV_DIR" ]; then
  for e in $(env | grep -i direnv | sed 's/\([^=]*\)=.*/\1/'); do
    unset $e
  done
fi
eval "$(direnv hook zsh)"

gc() {
  local branch sha
  branch=$1
  sha=$(git rev-parse $branch)
  ref=${2:-main}
  if [ -z "$(git status --porcelain)" ]; then
    git checkout $ref
    git pull
    git checkout $branch
    git reset --soft $(git merge-base HEAD $ref)
    git commit -m "replace with $sha"
    if git rebase $ref; then
      if git diff --exit-code $ref >/dev/null; then
        git checkout $ref
        git branch -d $branch
        echo "Branch deleted; remaining branches:"
        git branch
      else
        echo "Branch rebases cleanly, but has unmerged changes"
        git reset --hard $sha
        git checkout $ref
        echo "Remaining branches:"
        git branch
      fi
    else
      git rebase --abort
      git checkout $branch
      git reset --hard $sha
      git checkout $ref
      echo "Failed to gc, branch does not rebase cleanly."
    fi
    else
      echo "Working tree not clean, not doing anything."
  fi
}

_gc() {
    branches=($(git for-each-ref --format='%(refname:short)' 'refs/heads/*'))
    _arguments "1: :($branches)"
}
compdef _gc gc

if [ -e /Users/gary/.nix-profile/etc/profile.d/nix.sh ]; then . /Users/gary/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
if [ -e /home/gary/.nix-profile/etc/profile.d/nix.sh ]; then . /home/gary/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
